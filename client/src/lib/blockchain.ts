import { ethers } from 'ethers';

// C·∫•u h√¨nh h·ª£p ƒë·ªìng BaseCamp tr√™n m·∫°ng Base
export const BASECAMP_CONTRACT_ADDRESS = '0x26ed98bf771f9fabc226e64cf34e9c4b6cce90d0';

// RPC URLs cho m·∫°ng Base - s·ª≠ d·ª•ng environment variables v·ªõi fallback
export const BASE_RPC_URL = 
  import.meta.env.VITE_BASE_RPC_URL || 
  import.meta.env.VITE_ALCHEMY_BASE_URL ||
  import.meta.env.VITE_INFURA_BASE_URL ||
  'https://mainnet.base.org'; // RPC c√¥ng khai c·ªßa Base

// ABI t·ªëi thi·ªÉu cho ERC1155 - ch·ªâ c·∫ßn h√†m balanceOf ƒë·ªÉ ki·ªÉm tra s·ªë d∆∞ NFT
export const ERC1155_ABI = [
  // H√†m balanceOf: ki·ªÉm tra s·ªë l∆∞·ª£ng NFT c·ªßa m·ªôt ƒë·ªãa ch·ªâ cho token ID c·ª• th·ªÉ
  'function balanceOf(address account, uint256 id) view returns (uint256)',
  
  // H√†m balanceOfBatch: ki·ªÉm tra s·ªë d∆∞ cho nhi·ªÅu ƒë·ªãa ch·ªâ v√† token ID c√πng l√∫c (tu·ª≥ ch·ªçn)
  'function balanceOfBatch(address[] accounts, uint256[] ids) view returns (uint256[])'
];

/**
 * L·ªõp BlockchainService: Qu·∫£n l√Ω t·∫•t c·∫£ t∆∞∆°ng t√°c v·ªõi blockchain
 * Gi√∫p h·ªçc sinh hi·ªÉu c√°ch t·ªï ch·ª©c code blockchain m·ªôt c√°ch s·∫°ch s·∫Ω
 */
export class BlockchainService {
  private provider: ethers.JsonRpcProvider | null = null;
  private contract: ethers.Contract | null = null;

  /**
   * Kh·ªüi t·∫°o k·∫øt n·ªëi v·ªõi m·∫°ng Base
   * ƒê√¢y l√† b∆∞·ªõc ƒë·∫ßu ti√™n ƒë·ªÉ t∆∞∆°ng t√°c v·ªõi blockchain
   */
  async initialize(): Promise<void> {
    try {
      console.log('üîó ƒêang k·∫øt n·ªëi v·ªõi m·∫°ng Base...');
      
      // T·∫°o provider - ƒë√¢y l√† c·∫ßu n·ªëi gi·ªØa ·ª©ng d·ª•ng v√† blockchain
      this.provider = new ethers.JsonRpcProvider(BASE_RPC_URL);
      
      // Ki·ªÉm tra k·∫øt n·ªëi b·∫±ng c√°ch l·∫•y th√¥ng tin m·∫°ng
      const network = await this.provider.getNetwork();
      console.log(`‚úÖ ƒê√£ k·∫øt n·ªëi v·ªõi m·∫°ng: ${network.name} (Chain ID: ${network.chainId})`);
      
      // T·∫°o contract instance ƒë·ªÉ t∆∞∆°ng t√°c v·ªõi h·ª£p ƒë·ªìng BaseCamp
      this.contract = new ethers.Contract(
        BASECAMP_CONTRACT_ADDRESS,
        ERC1155_ABI,
        this.provider
      );
      
      console.log('üìã H·ª£p ƒë·ªìng BaseCamp ƒë√£ s·∫µn s√†ng');
      
    } catch (error) {
      console.error('‚ùå L·ªói khi kh·ªüi t·∫°o blockchain service:', error);
      throw new Error('Kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi m·∫°ng Base. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi internet.');
    }
  }

  /**
   * X√°c th·ª±c ƒë·ªãa ch·ªâ v√≠ EVM
   * EVM (Ethereum Virtual Machine) addresses c√≥ ƒë·ªãnh d·∫°ng c·ª• th·ªÉ
   * @param address - ƒê·ªãa ch·ªâ v√≠ c·∫ßn ki·ªÉm tra
   * @returns true n·∫øu ƒë·ªãa ch·ªâ h·ª£p l·ªá, false n·∫øu kh√¥ng
   */
  validateAddress(address: string): boolean {
    try {
      // ethers.js cung c·∫•p h√†m isAddress ƒë·ªÉ ki·ªÉm tra ƒë·ªãnh d·∫°ng
      // ƒê·ªãa ch·ªâ EVM h·ª£p l·ªá ph·∫£i:
      // - B·∫Øt ƒë·∫ßu b·∫±ng '0x'
      // - C√≥ ƒë√∫ng 42 k√Ω t·ª± (bao g·ªìm '0x')
      // - Ch·ªâ ch·ª©a k√Ω t·ª± hex (0-9, a-f, A-F)
      return ethers.isAddress(address);
    } catch (error) {
      console.error('L·ªói x√°c th·ª±c ƒë·ªãa ch·ªâ:', error);
      return false;
    }
  }

  /**
   * Ki·ªÉm tra quy·ªÅn s·ªü h·ªØu NFT c·ªßa m·ªôt ƒë·ªãa ch·ªâ v√≠
   * @param walletAddress - ƒê·ªãa ch·ªâ v√≠ c·∫ßn ki·ªÉm tra
   * @param tokenId - ID c·ªßa NFT (m·∫∑c ƒë·ªãnh l√† 1)
   * @returns Th√¥ng tin v·ªÅ NFT n·∫øu t√¨m th·∫•y
   */
  async checkNFTOwnership(walletAddress: string, tokenId: number = 1): Promise<NFTOwnershipResult> {
    // Ki·ªÉm tra xem service ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o ch∆∞a
    if (!this.provider || !this.contract) {
      throw new Error('Blockchain service ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o. Vui l√≤ng g·ªçi initialize() tr∆∞·ªõc.');
    }

    // X√°c th·ª±c ƒë·ªãa ch·ªâ v√≠ tr∆∞·ªõc khi th·ª±c hi·ªán truy v·∫•n
    if (!this.validateAddress(walletAddress)) {
      throw new Error('ƒê·ªãa ch·ªâ v√≠ kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra l·∫°i.');
    }

    try {
      console.log(`üîç ƒêang ki·ªÉm tra NFT cho ƒë·ªãa ch·ªâ: ${walletAddress}`);
      console.log(`üè∑Ô∏è Token ID: ${tokenId}`);
      
      // G·ªçi h√†m balanceOf c·ªßa h·ª£p ƒë·ªìng ERC1155
      // H√†m n√†y tr·∫£ v·ªÅ s·ªë l∆∞·ª£ng NFT m√† ƒë·ªãa ch·ªâ s·ªü h·ªØu cho token ID c·ª• th·ªÉ
      const balance = await this.contract.balanceOf(walletAddress, tokenId);
      
      // Chuy·ªÉn ƒë·ªïi BigInt th√†nh string ƒë·ªÉ d·ªÖ x·ª≠ l√Ω
      const balanceString = balance.toString();
      const hasNFT = balance > 0n; // S·ª≠ d·ª•ng BigInt comparison
      
      console.log(`üìä K·∫øt qu·∫£: ${hasNFT ? 'C√≥' : 'Kh√¥ng c√≥'} NFT (S·ªë l∆∞·ª£ng: ${balanceString})`);
      
      return {
        hasNFT,
        count: balanceString,
        tokenId,
        contractAddress: BASECAMP_CONTRACT_ADDRESS
      };
      
    } catch (error: any) {
      console.error('‚ùå L·ªói khi ki·ªÉm tra NFT:', error);
      
      // X·ª≠ l√Ω c√°c lo·∫°i l·ªói kh√°c nhau ƒë·ªÉ ƒë∆∞a ra th√¥ng b√°o ph√π h·ª£p
      if (error.code === 'NETWORK_ERROR') {
        throw new Error('L·ªói k·∫øt n·ªëi m·∫°ng. Vui l√≤ng ki·ªÉm tra internet v√† th·ª≠ l·∫°i.');
      } else if (error.code === 'CALL_EXCEPTION') {
        throw new Error('Kh√¥ng th·ªÉ g·ªçi h√†m h·ª£p ƒë·ªìng. H·ª£p ƒë·ªìng c√≥ th·ªÉ kh√¥ng t·ªìn t·∫°i ho·∫∑c kh√¥ng h·ªó tr·ª£ ERC1155.');
      } else {
        throw new Error(`L·ªói kh√¥ng x√°c ƒë·ªãnh: ${error.message || 'Vui l√≤ng th·ª≠ l·∫°i sau.'}`);
      }
    }
  }

  /**
   * Ki·ªÉm tra nhi·ªÅu token ID c√πng l√∫c (t√≠nh nƒÉng n√¢ng cao)
   * @param walletAddress - ƒê·ªãa ch·ªâ v√≠ c·∫ßn ki·ªÉm tra
   * @param tokenIds - M·∫£ng c√°c token ID c·∫ßn ki·ªÉm tra
   * @returns M·∫£ng k·∫øt qu·∫£ cho t·ª´ng token ID
   */
  async checkMultipleTokens(walletAddress: string, tokenIds: number[]): Promise<NFTOwnershipResult[]> {
    if (!this.provider || !this.contract) {
      throw new Error('Blockchain service ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o.');
    }

    if (!this.validateAddress(walletAddress)) {
      throw new Error('ƒê·ªãa ch·ªâ v√≠ kh√¥ng h·ª£p l·ªá.');
    }

    try {
      console.log(`üîç ƒêang ki·ªÉm tra ${tokenIds.length} token IDs cho ƒë·ªãa ch·ªâ: ${walletAddress}`);
      
      // S·ª≠ d·ª•ng Promise.all ƒë·ªÉ ki·ªÉm tra t·∫•t c·∫£ token ID song song (nhanh h∆°n)
      const results = await Promise.all(
        tokenIds.map(async (tokenId) => {
          const balance = await this.contract!.balanceOf(walletAddress, tokenId);
          return {
            hasNFT: balance > 0n,
            count: balance.toString(),
            tokenId,
            contractAddress: BASECAMP_CONTRACT_ADDRESS
          };
        })
      );
      
      return results;
      
    } catch (error: any) {
      console.error('‚ùå L·ªói khi ki·ªÉm tra nhi·ªÅu token:', error);
      throw new Error(`Kh√¥ng th·ªÉ ki·ªÉm tra nhi·ªÅu token: ${error.message}`);
    }
  }

  /**
   * L·∫•y th√¥ng tin m·∫°ng hi·ªán t·∫°i
   * @returns Th√¥ng tin v·ªÅ m·∫°ng blockchain ƒëang k·∫øt n·ªëi
   */
  async getNetworkInfo(): Promise<NetworkInfo> {
    if (!this.provider) {
      throw new Error('Provider ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o.');
    }

    try {
      const network = await this.provider.getNetwork();
      const blockNumber = await this.provider.getBlockNumber();
      
      return {
        name: network.name,
        chainId: Number(network.chainId),
        blockNumber,
        rpcUrl: BASE_RPC_URL
      };
    } catch (error: any) {
      throw new Error(`Kh√¥ng th·ªÉ l·∫•y th√¥ng tin m·∫°ng: ${error.message}`);
    }
  }
}

// Interfaces ƒë·ªÉ ƒë·ªãnh nghƒ©a ki·ªÉu d·ªØ li·ªáu (TypeScript best practices)

/**
 * K·∫øt qu·∫£ ki·ªÉm tra quy·ªÅn s·ªü h·ªØu NFT
 */
export interface NFTOwnershipResult {
  hasNFT: boolean;              // C√≥ s·ªü h·ªØu NFT hay kh√¥ng
  count: string;                // S·ªë l∆∞·ª£ng NFT (d·∫°ng string ƒë·ªÉ tr√°nh l·ªói v·ªõi s·ªë l·ªõn)
  tokenId: number;              // ID c·ªßa token ƒë∆∞·ª£c ki·ªÉm tra
  contractAddress: string;      // ƒê·ªãa ch·ªâ h·ª£p ƒë·ªìng
}

/**
 * Th√¥ng tin m·∫°ng blockchain
 */
export interface NetworkInfo {
  name: string;                 // T√™n m·∫°ng (v√≠ d·ª•: "base")
  chainId: number;              // Chain ID (v√≠ d·ª•: 8453 cho Base)
  blockNumber: number;          // S·ªë block hi·ªán t·∫°i
  rpcUrl: string;               // URL RPC ƒë∆∞·ª£c s·ª≠ d·ª•ng
}

// Xu·∫•t instance singleton ƒë·ªÉ s·ª≠ d·ª•ng trong to√†n b·ªô ·ª©ng d·ª•ng
export const blockchainService = new BlockchainService();
