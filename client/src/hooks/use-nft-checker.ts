import { useState, useCallback, useEffect } from 'react';
import { blockchainService, type NFTOwnershipResult } from '@/lib/blockchain';

/**
 * Custom hook ƒë·ªÉ qu·∫£n l√Ω vi·ªác ki·ªÉm tra NFT
 * Hook n√†y t√°ch bi·ªát logic blockchain kh·ªèi UI components
 */
export function useNFTChecker() {
  // State ƒë·ªÉ qu·∫£n l√Ω tr·∫°ng th√°i c·ªßa ·ª©ng d·ª•ng
  const [isLoading, setIsLoading] = useState(false);
  const [result, setResult] = useState<NFTOwnershipResult | null>(null);
  const [error, setError] = useState<string | null>(null);
  const [isInitialized, setIsInitialized] = useState(false);

  /**
   * Kh·ªüi t·∫°o blockchain service
   * Ch·ªâ c·∫ßn g·ªçi m·ªôt l·∫ßn khi ·ª©ng d·ª•ng b·∫Øt ƒë·∫ßu
   */
  const initialize = useCallback(async () => {
    if (isInitialized) return;
    
    try {
      setIsLoading(true);
      setError(null);
      
      await blockchainService.initialize();
      setIsInitialized(true);
      
    } catch (err: any) {
      setError(err.message || 'Kh√¥ng th·ªÉ kh·ªüi t·∫°o k·∫øt n·ªëi blockchain');
      console.error('L·ªói kh·ªüi t·∫°o:', err);
    } finally {
      setIsLoading(false);
    }
  }, [isInitialized]);

  /**
   * Ki·ªÉm tra quy·ªÅn s·ªü h·ªØu NFT
   * @param walletAddress - ƒê·ªãa ch·ªâ v√≠ c·∫ßn ki·ªÉm tra
   * @param tokenId - ID c·ªßa token (m·∫∑c ƒë·ªãnh l√† 1)
   */
  const checkNFT = useCallback(async (walletAddress: string, tokenId: number = 1) => {
    // ƒê·∫£m b·∫£o service ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o tr∆∞·ªõc khi ki·ªÉm tra
    if (!isInitialized) {
      await initialize();
    }

    try {
      setIsLoading(true);
      setError(null);
      setResult(null);

      // X√°c th·ª±c ƒë·ªãa ch·ªâ tr∆∞·ªõc khi g·ªçi API
      if (!blockchainService.validateAddress(walletAddress)) {
        throw new Error('ƒê·ªãa ch·ªâ v√≠ kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra ƒë·ªãnh d·∫°ng ƒë·ªãa ch·ªâ.');
      }

      console.log(`üîç B·∫Øt ƒë·∫ßu ki·ªÉm tra NFT cho: ${walletAddress}`);
      
      const ownershipResult = await blockchainService.checkNFTOwnership(walletAddress, tokenId);
      setResult(ownershipResult);
      
      console.log('‚úÖ Ki·ªÉm tra ho√†n t·∫•t:', ownershipResult);
      
    } catch (err: any) {
      const errorMessage = err.message || 'C√≥ l·ªói x·∫£y ra khi ki·ªÉm tra NFT';
      setError(errorMessage);
      console.error('‚ùå L·ªói ki·ªÉm tra NFT:', err);
    } finally {
      setIsLoading(false);
    }
  }, [isInitialized, initialize]);

  /**
   * X√°c th·ª±c ƒë·ªãa ch·ªâ v√≠
   * @param address - ƒê·ªãa ch·ªâ c·∫ßn x√°c th·ª±c
   * @returns true n·∫øu ƒë·ªãa ch·ªâ h·ª£p l·ªá
   */
  const validateAddress = useCallback((address: string): boolean => {
    return blockchainService.validateAddress(address);
  }, []);

  /**
   * Reset t·∫•t c·∫£ state v·ªÅ tr·∫°ng th√°i ban ƒë·∫ßu
   */
  const reset = useCallback(() => {
    setResult(null);
    setError(null);
    setIsLoading(false);
  }, []);

  /**
   * L·∫•y th√¥ng tin m·∫°ng hi·ªán t·∫°i
   */
  const getNetworkInfo = useCallback(async () => {
    try {
      if (!isInitialized) {
        await initialize();
      }
      return await blockchainService.getNetworkInfo();
    } catch (err: any) {
      console.error('L·ªói l·∫•y th√¥ng tin m·∫°ng:', err);
      throw err;
    }
  }, [isInitialized, initialize]);

  return {
    // State
    isLoading,
    result,
    error,
    isInitialized,
    
    // Actions
    initialize,
    checkNFT,
    validateAddress,
    reset,
    getNetworkInfo,
    
    // Computed values
    hasResult: result !== null,
    hasError: error !== null,
    canCheck: isInitialized && !isLoading
  };
}

/**
 * Hook ƒë∆°n gi·∫£n ƒë·ªÉ x√°c th·ª±c ƒë·ªãa ch·ªâ trong real-time
 * @param address - ƒê·ªãa ch·ªâ c·∫ßn x√°c th·ª±c
 * @returns object ch·ª©a tr·∫°ng th√°i validation
 */
export function useAddressValidation(address: string) {
  const [isValid, setIsValid] = useState(false);
  const [isEmpty, setIsEmpty] = useState(true);

  // C·∫≠p nh·∫≠t validation khi address thay ƒë·ªïi
  useEffect(() => {
    const trimmedAddress = address.trim();
    setIsEmpty(trimmedAddress.length === 0);
    
    if (trimmedAddress.length > 0) {
      setIsValid(blockchainService.validateAddress(trimmedAddress));
    } else {
      setIsValid(false);
    }
  }, [address]);

  return {
    isValid,
    isEmpty,
    showValidation: !isEmpty,
    canSubmit: isValid && !isEmpty
  };
}
